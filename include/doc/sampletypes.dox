/*!
    \class Signal
    \ingroup signal-datatypes

    \brief The Signal class is a wrapper which provides introspection
    of the Signal::Type enum.
*/

/*!
    \enum Signal::Type
    \brief The Signal::Type enum lists the types of signals captured
    by the device.
*/

/*!
    \fn Signal::toString()
    \return the given \a type as a string.
*/

/*!
    \fn Signal::fromString()
    \return the given \a type as a Signal::Type, or -1 if invalid.
*/

/*!
    \fn Signal::count()
    \return the number of Signal::Type%s in the enum.
*/

/* ========================================================================== */

/*!
    \class Sample
    \ingroup signal-datatypes

    \brief The Sample class is the base class for all samples acquired from
    sensors on the device.
*/

/*!
    \fn Sample::~Sample()
    \brief Destroy this Sample.

    Providing a virtual destructor means that elements can implement their own
    private subclasses of the different sample types if necessary (to handle
    memory management, etc.).
*/

/*!
    \var Sample::timestamp
    \brief The time at which the Sample was captured on the device.

    It is measured in nanoseconds from an arbitrary point in time.
    The timestamps of all Samples captured while the device is powered on are
    relative to the same reference point.
*/

/* ========================================================================== */

/*!
    \class EegSample
    \ingroup signal-datatypes

    \brief The EegSample class holds the data for one multi-channel sample of
    EEG.
*/

/*!
    \var EegSample::seqnum
    \brief A monotonically increasing sequence number.

    The seqnum of each EegSample should be exactly 1 greater than the seqnum of
    the previous sample, except for the first sample after the Pipeline is
    started. A discontinuity in the seqnum indicates that an EegSample got lost
    somewhere between the device and the SampleDecoder.
*/

/*!
    \var EegSample::leadOff
    \brief Bit mask indicating the lead-off status (1 = off).
*/

/*!
    \var EegSample::values
    \brief The voltage readings in microvolts.
*/


/* ========================================================================== */

/*!
    \class VideoSample
    \ingroup signal-datatypes

    \brief The VideoSample class holds the data for one frame of video.
*/

/*!
    \var VideoSample::w
    \brief The width of the frame in pixels.
*/

/*!
    \var VideoSample::h
    \brief The height of the frame in pixels.
*/

/*!
    \var VideoSample::data
    \brief The video frame data.

    The data format is 8 bits per pixel greyscale in row-major order.
*/


/* ========================================================================== */

/*!
    \class ImuSample
    \ingroup signal-datatypes

    \brief The ImuSample class holds the data for one 6-axis sample from
    the IMU.
*/

/*!
    \var ImuSample::acc
    \brief The linear accelerations in \e g.
*/

/*!
    \var ImuSample::gyr
    \brief The angular rates in degrees per second.
*/


/* ========================================================================== */

/*!
    \struct FeatureVector
    \ingroup signal-pipeline

    \brief The FeatureVector struct holds a set of meaningful values extracted
    from a sequence of Sample%s.

    Each FeatureExtractor outputs a FeatureVector for each window of Sample%s
    that it analyses. The number of elements and the meaning of each element
    in the vector is left entirely up to each feature extractor (which will, of
    course, document these in detail).
*/

/*!
    \var FeatureVector::signalType
    \brief The type of signal the features were extracted from.
*/

/*!
    \var FeatureVector::startTime
    \brief The start time of the window from which the features were extracted
    (in ns).
*/

/*!
    \var FeatureVector::features
    \brief The list of extracted features.

    The number and meaning of features in this list is left up to each
    FeatureExtractor.
*/
