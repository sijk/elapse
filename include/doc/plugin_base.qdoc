/*!
    \class FactoryInterface
    \ingroup plugins-int
    \inmodule elapse-core

    \brief The FactoryInterface class is the interface implemented by all
    plugins.

    This class provides an interface for listing the classes it can create and
    for instantiating them. It is separate from BasePlugin because the interface
    for a Qt plugin must consist only of pure virtual methods.
*/

/*!
    \fn FactoryInterface::~FactoryInterface()
    Destroy this FactoryInterface.
*/

/*!
    \fn FactoryInterface::keys()
    \return a list of strings representing the classes that this
    FactoryInterface instance is capable of instantiating.
*/

/*!
    \fn FactoryInterface::create(const QString &key)
    Instantiate an object of the class corresponding to the given \a key.
    \return a pointer to that object.
*/

/* ========================================================================== */

/*!
    \class BasePlugin
    \ingroup plugins-int
    \inmodule elapse-core

    \brief The BasePlugin class is the base class for all plugins.

    It is essentially a convenience class for plugin authors, allowing them to
    define a trivial classes() method and get default implementations of the
    FactoryInterface methods for free.
*/

/*!
    \typedef BasePlugin::ClassList
    Synonym for QList<QMetaObject>.
*/

/*!
    \fn BasePlugin::~BasePlugin()
    Destroy this BasePlugin.
*/

/*!
    \fn BasePlugin::classes()
    \return the list of classes that this BasePlugin is capable of
    instantiating. Classes inheriting from BasePlugin must implement this
    method, as described in the \l{Plugin API} documentation.
*/

/*!
    \fn BasePlugin::keys()
    \return a list of strings representing the classes that this
    FactoryInterface instance is capable of instantiating.
*/

/*!
    \fn BasePlugin::create(const QString &key)
    Instantiate an object of the class corresponding to the given \a key.
    \return a pointer to that object.
*/
