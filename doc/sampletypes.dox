/*!
    \class elapse::Signal
    \ingroup signal-datatypes

    \brief The Signal class is a wrapper which provides introspection
    of the Signal::Type enum.
*/

/*!
    \enum elapse::Signal::Type
    \brief The Signal::Type enum lists the types of signals captured
    by the device.
*/

/*!
    \fn elapse::Signal::toString()
    \return the given \a type as a string.
*/

/*!
    \fn elapse::Signal::fromString()
    \return the given \a type as a Signal::Type, or -1 if invalid.
*/

/*!
    \fn elapse::Signal::count()
    \return the number of Signal::Type%s in the enum.
*/

/* ========================================================================== */

/*!
    \class elapse::Sample
    \ingroup signal-datatypes

    \brief The Sample class is the base class for all samples acquired from
    sensors on the device.
*/

/*!
    \fn elapse::Sample::~Sample()
    \brief Destroy this Sample.

    Providing a virtual destructor means that elements can implement their own
    private subclasses of the different sample types if necessary (to handle
    memory management, etc.).
*/

/*!
    \var elapse::Sample::timestamp
    \brief The time at which the Sample was captured on the device.

    It is measured in nanoseconds from an arbitrary point in time.
    The timestamps of all Samples captured while the device is powered on are
    relative to the same reference point.
*/

/* ========================================================================== */

/*!
    \class elapse::EegSample
    \ingroup signal-datatypes

    \brief The EegSample class holds the data for one multi-channel sample of
    EEG.
*/

/*!
    \var elapse::EegSample::seqnum
    \brief A monotonically increasing sequence number.

    The seqnum of each EegSample should be exactly 1 greater than the seqnum of
    the previous sample, except for the first sample after the Pipeline is
    started. A discontinuity in the seqnum indicates that an EegSample got lost
    somewhere between the device and the SampleDecoder.
*/

/*!
    \var elapse::EegSample::leadOff
    \brief Bit mask indicating the lead-off status (1 = off).
*/

/*!
    \var elapse::EegSample::values
    \brief The voltage readings in microvolts.
*/


/* ========================================================================== */

/*!
    \class elapse::VideoSample
    \ingroup signal-datatypes

    \brief The VideoSample class holds the data for one frame of video.
*/

/*!
    \var elapse::VideoSample::w
    \brief The width of the frame in pixels.
*/

/*!
    \var elapse::VideoSample::h
    \brief The height of the frame in pixels.
*/

/*!
    \var elapse::VideoSample::data
    \brief The video frame data.

    The data format is 8 bits per pixel greyscale in row-major order.
*/


/* ========================================================================== */

/*!
    \class elapse::ImuSample
    \ingroup signal-datatypes

    \brief The ImuSample class holds the data for one 6-axis sample from
    the IMU.
*/

/*!
    \var elapse::ImuSample::acc
    \brief The linear accelerations in \e g.
*/

/*!
    \var elapse::ImuSample::gyr
    \brief The angular rates in degrees per second.
*/


/* ========================================================================== */

/*!
    \struct elapse::FeatureVector
    \ingroup signal-datatypes

    \brief The FeatureVector struct holds a set of meaningful values extracted
    from a sequence of Sample%s.

    Each FeatureExtractor outputs a FeatureVector for each window of Sample%s
    that it analyses. The number of elements and the meaning of each element
    in the vector is left entirely up to each feature extractor (which will, of
    course, document these in detail).
*/

/*!
    \var elapse::Signal::Type elapse::FeatureVector::signalType
    \brief The type of signal the features were extracted from.
*/

/*!
    \var quint64 elapse::FeatureVector::startTime
    \brief The start time of the window from which the features were extracted
    (in ns).
*/

/*!
    \var QVector<double> elapse::FeatureVector::features
    \brief The list of extracted features.

    The number and meaning of features in this list are left up to each
    FeatureExtractor.
*/


/* ========================================================================== */

/*!
    \struct elapse::CognitiveState
    \ingroup signal-datatypes

    \brief The CognitiveState class holds a set of values representing
    the user's cognitive state.

    A Classifier calculates the CognitiveState from a set of FeatureVector%s.
    The number of fields and the meaning of each field in the CognitiveState
    data structure is left entirely up to each Classifier implementation (which
    will, of course, document these in detail).
*/

/*!
    \var quint64 elapse::CognitiveState::startTime
    \brief The start time of the window from which the FeatureVector%s were
    extracted (in ns).
*/

/*!
    \var QVector<double> elapse::CognitiveState::state
    \brief Values representing the user's cognitive state.

    The number and meaning of items in this list are left up to each
    Classifier.
*/
