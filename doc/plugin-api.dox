/*!
    \page plugin-api Plugin API

    This page documents the Elapse plugin API for implementing signal
    processing and classification algorithms.

    \tableofcontents

    Plugin System Design                                        {#plugin-design}
    ====================

    The Elapse framework provides all of the infrastructure to implement
    cognitive state monitoring applications but does not implement any signal
    processing itself. All signal processing and classification is provided by
    plugins. Plugins can be implemented in several languages, though not every
    language supports every element type. See the diagrams
    [here](\ref structure) and [here](\ref pipeline-arch) for an overview of
    the structure of the signal processing pipeline. See
    [here](\ref pipeline-elements) for documentation on each element in the
    pipeline. See below for how to implement these elements as plugins.

    Example plugins                                           {#plugin-examples}
    ===============

    The following pages give complete examples of how to implement a plugin
    in each of the supported languages.

    - \subpage plugin-example-cpp
    - \subpage plugin-example-py


    API Documentation                                         {#plugin-api-docs}
    =================

    C++
    ---

    - \ref plugins-ext
    - \ref pipeline-elements "Element base classes"

    Python
    ------

    - \ref plugin-bindings-py
*/

/*!
    \defgroup plugins-ext C++ Plugin API

    The classes and macros required for implementing Elapse plugins in C++.
*/

/*!
    \page plugin-example-cpp C++ plugin example

    \todo Mention the need for a Q_INVOKABLE default constructor.
*/

/*!
    \page plugin-example-py Python plugin example

    ...
*/

/*!
    \defgroup plugin-bindings-py Python bindings
    \htmlinclude elapse-python.html
*/

