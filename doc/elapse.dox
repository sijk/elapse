/*!
    \mainpage Elapse developer documentation

    \tableofcontents

    You are here                                                        {#start}
    ============

    This is the developer documentation for the Elapse client-side application.
    You only need to read this if you're working on the core application itself.
    If you're wanting to develop plugins for signal processing/classification,
    go and read the \ref plugin-api documentation instead.

    Software structure                                              {#structure}
    ==================

    The following paragraph gives a very brief overview of the structure of the
    Elapse framework. Follow the linked words to start exploring the
    documentation. For a more detailed high-level overview of the software
    design, read the relevant section of [my thesis].

    The core of the Elapse application is the [ElapseClient]. It uses a
    [DeviceProxy] to communicate with the device. The application's
    functionality is centred on a [Pipeline] containing signal processing
    [elements]. The pipeline contains:

    - a [DataSource] which receives data from the device,
    - several [SampleDecoders] which decode the raw data into meaningful values,
    - [FeatureExtractors] which extract salient features from sequences of
      [Samples],
    - a [Classifier] which classifies the user's [CognitiveState] from a set
      of [FeatureVectors],
    - and an [OutputAction] which takes some action based on the classified
      cognitive state.

    The application has a [plugin manager] which loads a [set] of signal
    processing elements from [plugins]. Plugins can be implemented in a number
    of languages. A [core plugin] provides default implementations for all of
    the elements.

    [my thesis]:          http://hdl.handle.net/10092/10408
    [ElapseClient]:       \ref elapse::client::ElapseClient
    [DeviceProxy]:        \ref elapse::client::DeviceProxy
    [Pipeline]:           \ref signal-pipeline
    [elements]:           \ref pipeline-elements
    [DataSource]:         \ref elapse::elements::DataSource
    [SampleDecoders]:     \ref elapse::elements::SampleDecoder
    [FeatureExtractors]:  \ref elapse::elements::FeatureExtractor
    [Classifier]:         \ref elapse::elements::Classifier
    [OutputAction]:       \ref elapse::elements::OutputAction
    [Samples]:            \ref signal-datatypes
    [FeatureVectors]:     \ref elapse::data::FeatureVector
    [CognitiveState]:     \ref elapse::data::CognitiveState
    [plugin manager]:     \ref elapse::plugin::Manager
    [plugins]:            \ref plugin-api
    [set]:                \ref elapse::elements::ElementSet
    [core plugin]:        \ref core-plugin

    @startuml{structure.png}

    ElapseClient *-- DeviceProxy
    ElapseClient *-- Pipeline
    ElapseClient *-- PluginManager

    Pipeline o-- ElementSet
    PluginManager ..> ElementSet : creates

    ElementSet *-- "1" DataSource
    ElementSet *-- "N" SampleDecoder
    ElementSet *-- "N" FeatureExtractor
    ElementSet *-- "1" Classifier
    ElementSet *-- "1" OutputAction

    DataSource ..> QByteArray : produces
    SampleDecoder <.. QByteArray

    SampleDecoder ..> Sample : decodes
    FeatureExtractor <.. Sample

    FeatureExtractor ..> FeatureVector : extracts
    Classifier <.. FeatureVector

    Classifier ..> CognitiveState : classifies
    OutputAction <.. CognitiveState

    @enduml

    Building & Installing                                       {#build-install}
    =====================

    ...

    Code Documentation                                                {#doclist}
    ==================

    - \ref app
    - \ref signal-pipeline
    - \ref core-plugin
    - \ref plugins-int
    - \ref plugins-ext
    - \ref widgets

    Memory management policies                                         {#memory}
    ==========================

    - To express ownership of a pointer, use one of the following
      (in order of preference):
        - QObject parent
            - For instances of QObject subclasses.
        - ``std::unique_ptr``
            - For everything else.
        - ``QScopedPointer``
            - Only for pimpl d_ptrs.
        - ``std::shared_ptr``
            - If unique_ptr semantics are inappropriate.

    - To express non-owning observation of a pointer, use:
        - Raw pointer or reference

    Raw pointers are always non-owning. The lifetime of the pointee must be
    managed either by a QObject parent or by a smart pointer. Never assign
    a heap-allocated instance to a raw pointer.

    The only time that a smart pointer should be passed by value is when
    ownership is being transferred. In general, you should pass raw pointers
    or references.

    If these rules are followed then nothing should ever need to be explicitly
    ``delete``d.

    License                                                             {#legal}
    =======

    Copyright (C) 2015 Simon Knopp

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Additional permission under GNU GPL version 3 section 7:

    The licensors of this Program grant you additional permission to link
    this Program with other modules by means of the provided plugin
    interface and to convey the resulting work, regardless of the license
    terms of the other modules.
*/

/*!
    \namespace elapse
    \brief The public interface to the application.
*/

/*!
    \namespace elapse::elements
    \brief Elements of the \ref signal-pipeline "signal processing pipeline".
    \ingroup pipeline-elements
*/

/*!
    \namespace elapse::widgets
    \brief Miscellaneous GUI widgets
    \ingroup widgets
*/

/*!
    \defgroup app Elapse Application

    These classes relate to the core Elapse application.

    For a detailed specification of the ElapseClient's behaviour, see
    \ref elapseclient-fsm.
*/

/*!
    \defgroup signal-pipeline Signal Pipeline
    \ingroup app

    These classes relate to the signal processing pipeline.

    For an illustration of the Pipeline's structure, see \ref pipeline-arch.
*/

/*!
    \defgroup pipeline-elements Pipeline Elements
    \ingroup signal-pipeline

    These classes implement the elements of the \ref signal-pipeline
    "signal processing pipeline". For an illustration of how they fit together,
    see \ref pipeline-arch.
*/

/*!
    \defgroup signal-datatypes Pipeline Datatypes
    \ingroup signal-pipeline

    These classes define the types of data flowing through the
    \ref signal-pipeline "pipeline".
*/

/*!
    \defgroup core-plugin Core Plugin

    These classes provide default implementations of \ref pipeline-elements.
*/

namespace elapse {
/*!
    \defgroup plugins-int Internal Plugin Management
    \ingroup app

    The Elapse framework has a plugin::Manager for loading a [set of elements]
    (\ref elements::ElementSet) from plugins. The plugin manager provides a
    GUI and maintains a list of all of the available plugins, but the actual
    work of searching for and loading plugins is delegated to several
    plugin::Host%s. There is one plugin host for each supported language (as
    well as one especially for the statically-linked core plugin).
*/
}

/*!
    \defgroup widgets Widgets

    These classes provide miscellaneous GUI widgets.
*/

/*!
    \defgroup logging Logging

    These classes provide tools for managing log messages.
*/
