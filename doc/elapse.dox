/*!
    \mainpage Elapse developer documentation

    \section start You are here

    This is the developer documentation for the Elapse client-side application.
    You need to read this if you're hacking on the core application itself. If
    you're wanting to develop plugins for signal processing/classification,
    go and read the \ref plugin-api documentation instead.

    \section overview Overviews and Guides

    The following pages describe the design of the core Elapse application.

    \li ...

    @startuml{structure.png}

    ElapseClient *-- DeviceProxy
    ElapseClient *-- Pipeline
    ElapseClient *-- PluginManager

    Pipeline o-- ElementSet
    PluginManager ..> ElementSet : creates

    ElementSet *-- "1" DataSource
    ElementSet *-- "N" SampleDecoder
    ElementSet *-- "N" FeatureExtractor
    ElementSet *-- "1" Classifier
    ElementSet *-- "1" OutputAction

    DataSource ..> QByteArray : produces
    SampleDecoder <.. QByteArray

    SampleDecoder ..> Sample : decodes
    FeatureExtractor <.. Sample

    FeatureExtractor ..> FeatureVector : extracts
    Classifier <.. FeatureVector

    Classifier ..> CognitiveState : classifies
    OutputAction <.. CognitiveState

    @enduml

    \section build-install Building & Installing

    ...

    \section doclist Code Documentation

    \li \ref app
    \li \ref signal-pipeline
    \li \ref core-plugin
    \li \ref plugins-int
    \li \ref plugins-ext
    \li \ref widgets

    \section memory Memory management policies

    - To express ownership of a pointer, use one of the following
      (in order of preference):
        - QObject parent
            - For instances of QObject subclasses.
        - std::unique_ptr
            - For everything else.
        - QScopedPointer
            - Only for pimpl d_ptrs.
        - std::shared_ptr
            - If unique_ptr semantics are inappropriate.

    - To express non-owning observation of a pointer, use:
        - Raw pointer or reference

    Raw pointers are always non-owning. The lifetime of the pointee must be
    managed either by a QObject parent or by a smart pointer. Never assign
    a heap-allocated instance to a raw pointer.

    The only time that a smart pointer should be passed by value is when
    ownership is being transferred. In general, you should pass raw pointers
    or references.

    If these rules are followed then nothing should ever need to be explicitly
    ``delete``d.

    \section legal Licence Information

    The core Elapse application is licensed under the terms of the ...
*/

/*!
    \namespace elapse
    \brief The public interface to the application.
*/

/*!
    \namespace elapse::elements
    \brief Elements of the \ref signal-pipeline "signal processing pipeline".
    \ingroup pipeline-elements
*/

/*!
    \namespace elapse::widgets
    \brief Miscellaneous GUI widgets
    \ingroup widgets
*/

/*!
    \defgroup app Elapse Application

    These classes relate to the core Elapse application.

    For a detailed specification of the ElapseClient's behaviour, see
    \ref elapseclient-fsm.
*/

/*!
    \defgroup signal-pipeline Signal Pipeline
    \ingroup app

    These classes relate to the signal processing pipeline.

    For an illustration of the Pipeline's structure, see \ref pipeline-arch.
*/

/*!
    \defgroup pipeline-elements Pipeline Elements
    \ingroup signal-pipeline

    These classes implement the elements of the \ref signal-pipeline
    "signal processing pipeline". For an illustration of how they fit together,
    see \ref pipeline-arch.
*/

/*!
    \defgroup signal-datatypes Pipeline Datatypes
    \ingroup signal-pipeline

    These classes define the types of data flowing through the
    \ref signal-pipeline "pipeline".
*/

/*!
    \defgroup core-plugin Core Plugin

    These classes provide default implementations of \ref pipeline-elements.
*/

/*!
    \defgroup plugins-int Internal Plugin Management
    \ingroup app

    These classes enable the core application to search for and load plugins.
    They also provide the base classes for the plugins themselves. 
*/

/*!
    \defgroup widgets Widgets

    These classes provide miscellaneous GUI widgets.
*/

/*!
    \defgroup logging Logging

    These classes provide tools for managing log messages.
*/
